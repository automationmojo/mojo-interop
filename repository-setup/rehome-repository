#!/usr/bin/env python3

import argparse
import configparser
import os
import platform
import shutil
import sys
import subprocess

PROJECT_NAME="(Not Set)"

THIS_DIR = os.path.abspath(os.path.dirname(__file__))
THIS_MODULE = sys.modules[__name__]

REPOSITORY_FOLDER = os.path.abspath(os.path.join(THIS_DIR, ".."))
REPOSITORY_CONFIG_FILE = os.path.abspath(os.path.join(THIS_DIR, "repository-config.ini"))
REPOSITORY_CACHE_FOLDER = os.path.abspath(os.path.join(REPOSITORY_FOLDER, ".cache"))
REPOSITORY_SOURCE_FOLDER = os.path.abspath(os.path.join(REPOSITORY_FOLDER, "source"))

WORKSPACES_FOLDER = os.path.join(REPOSITORY_FOLDER, "workspaces")

# The PYTHON_VERSION can be pinned in the repository config
PYTHON_VERSION = None

if os.path.exists(REPOSITORY_CONFIG_FILE):
    config = configparser.ConfigParser()
    config.read(REPOSITORY_CONFIG_FILE)
    if "DEFAULT" in config:
        default_config = config["DEFAULT"]

        if "PROJECT_NAME" in default_config:
            PROJECT_NAME = default_config["PROJECT_NAME"]

        if "PYTHON_VERSION" in default_config:
            PYTHON_VERSION = default_config["PYTHON_VERSION"]

# Standardized Python Version
if PYTHON_VERSION is None:
    PYTHON_VERSION = "python{}.{}".format(*(platform.python_version_tuple()[:2]))

pyres = subprocess.run("{} -c \"print('test')\"".format(PYTHON_VERSION), shell=True)
if pyres.returncode != 0:
    print("The required python version '{}' does not appear to be installed.".format(PYTHON_VERSION), file=sys.stderr)
    exit(1)

VENV_FOLDER = os.path.join(REPOSITORY_FOLDER, ".venv")
VENV_BIN_FOLDER = os.path.join(VENV_FOLDER, "bin")
VENV_SITEPACKAGES_FOLDER = os.path.join(VENV_FOLDER, "lib", PYTHON_VERSION, "site-packages")


def replace_macros(template_line):
    """
        Perform a simple replacement any macros found in the template line passed to us.
    """

    home = os.path.expanduser("~")

    filled_line = template_line

    filled_line = filled_line.replace(r"${TMPLT:HOME}", home)
    filled_line = filled_line.replace(r"${TMPLT:PYTHON_VERSION}", PYTHON_VERSION)
    filled_line = filled_line.replace(r"${TMPLT:REPOSITORY_FOLDER}", REPOSITORY_FOLDER)
    filled_line = filled_line.replace(r"${TMPLT:VENV_FOLDER}", VENV_FOLDER)
    filled_line = filled_line.replace(r"${TMPLT:VENV_BIN_FOLDER}", VENV_BIN_FOLDER)
    filled_line = filled_line.replace(r"${TMPLT:VENV_SITEPACKAGES_FOLDER}", VENV_SITEPACKAGES_FOLDER)
    filled_line = filled_line.replace(r"${TMPLT:WORKSPACES_FOLDER}", WORKSPACES_FOLDER)

    return filled_line

def generate_directories():

    if not os.path.exists(REPOSITORY_CACHE_FOLDER):
        os.makedirs(REPOSITORY_CACHE_FOLDER)

    return

def generate_python_path():

    #TODO: Add any PYTHONPATH customizations here.

    python_path = "{}/packages:{}/testroots/testplus:{}".format(
        REPOSITORY_SOURCE_FOLDER,
        REPOSITORY_SOURCE_FOLDER,
        VENV_SITEPACKAGES_FOLDER)
    return python_path

def generate_development_env_file():

    env_file = "{}/.env".format(REPOSITORY_FOLDER)
    with open(env_file, 'w') as envf:
        envf.write("PYTHON_VERSION=\"{}\"".format(PYTHON_VERSION))
        envf.write(os.linesep)
 
        python_path = generate_python_path()
        envf.write("PYTHONPATH=\"{}\"".format(python_path))
        envf.write(os.linesep)

        #TODO: Add the setting of any other '.env' environment variables here.

        envf.write(os.linesep)

    return

def generate_vscode_workspace_files():
    # Go through all of the VSCODE workspace templates and generate the 'code-workspace' files homed to the
    # location of this cloned repository

    print("Scanning workspaces folder:")
    print(WORKSPACES_FOLDER)
    print("")

    workspace_template_files = []
    
    for root, _, files in os.walk(WORKSPACES_FOLDER):
        for np in files:
            np_full = os.path.join(root, np)
            if os.path.isfile(np_full):
                _, npext = os.path.splitext(np_full)
                if npext == ".template":
                    workspace_template_files.append(np_full)

    for template_file in workspace_template_files:

        template_file_base, _ = os.path.splitext(os.path.basename(template_file))
        template_dir = os.path.dirname(template_file)
        workspace_file = os.path.join(template_dir, "{}.code-workspace".format(template_file_base))

        print("Processing template: {}".format(template_file))

        with open(template_file, 'r') as tf:
            template_lines = tf.read().splitlines(True)

            with open(workspace_file, 'w') as wf:
                print("Generating code-workspace: {}".format(workspace_file))
                for tline in template_lines:
                    fline = replace_macros(tline)
                    wf.write(fline)

def rehome_repository_main():

    parser = argparse.ArgumentParser(
                    prog='rehome-repository',
                    description='Configures a repository for operations in a new location.')

    parser.add_argument('--skip-workspaces', default=False, dest='skip_workspaces', action='store_true',
        help="Indicates that VS Code workspaces should not be created.")
    args = parser.parse_args()

    generate_directories()
    generate_development_env_file()

    if not args.skip_workspaces:
        generate_vscode_workspace_files()

    return

if __name__ == "__main__":
    rehome_repository_main()


